#include <iden3math/bigint.h>
#include <iden3math/serialize.h>
#include <gtest/gtest.h>

namespace iden3math::serialize {

TEST(serialize, lower_ascii) {
    std::string text = "AbCdEfGhIjKlMnOpQrStUvWxYz`1234567890-=~!@#$%^&*()_+[]\\;',./{}|:\"<>?;";
    std::string expected = "abcdefghijklmnopqrstuvwxyz`1234567890-=~!@#$%^&*()_+[]\\;',./{}|:\"<>?;";
    lower(text);
    EXPECT_EQ(expected, text);
}

TEST(serialize, lower_non_ascii) {
    std::string text = "AbCdEfGhIjKlMnOpQrStUvWxYzтест测试テスト試験prüfen";
    std::string expected = "abcdefghijklmnopqrstuvwxyzтест测试テスト試験prüfen";
    lower(text);
    EXPECT_EQ(expected, text);
}

TEST(serialize, swap_endian) {
    ByteVec1D bytes = {0x01, 0x02, 0x03, 0x04};
    ByteVec1D expected = {0x04, 0x03, 0x02, 0x01};
    ByteVec1D swapped = swap_endian(bytes);
    EXPECT_EQ(expected, swapped);
}

TEST(serialize, hexstr_to_bytes) {
    std::string hexstr = "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";
    ByteVec1D expected = {0xdd, 0xf2, 0x52, 0xad, 0x1b, 0xe2, 0xc8, 0x9b, 0x69, 0xc2, 0xb0, 0x68, 0xfc, 0x37, 0x8d, 0xaa, 0x95, 0x2b, 0xa7, 0xf1, 0x63, 0xc4, 0xa1, 0x16, 0x28, 0xf5, 0x5a, 0x4d, 0xf5, 0x23, 0xb3, 0xef};
    ByteVec1D bytes;
    EXPECT_TRUE(hexstr_to_bytes(hexstr, bytes));
    EXPECT_NE(hexstr_to_bytes(hexstr), std::nullopt);
    EXPECT_EQ(expected, bytes);
}

TEST(serialize, hexstr_to_bytes_invalid_char) {
    std::string hexstr = "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef";
    ByteVec1D bytes;
    hexstr[32] = '0' - 1;
    EXPECT_FALSE(hexstr_to_bytes(hexstr, bytes));
    EXPECT_EQ(hexstr_to_bytes(hexstr), std::nullopt);
    hexstr[32] = '9' + 1;
    EXPECT_FALSE(hexstr_to_bytes(hexstr, bytes));
    EXPECT_EQ(hexstr_to_bytes(hexstr), std::nullopt);
    hexstr[32] = 'a' - 1;
    EXPECT_FALSE(hexstr_to_bytes(hexstr, bytes));
    EXPECT_EQ(hexstr_to_bytes(hexstr), std::nullopt);
    hexstr[32] = 'z' + 1;
    EXPECT_FALSE(hexstr_to_bytes(hexstr, bytes));
    EXPECT_EQ(hexstr_to_bytes(hexstr), std::nullopt);
    hexstr[32] = 'A' - 1;
    EXPECT_FALSE(hexstr_to_bytes(hexstr, bytes));
    EXPECT_EQ(hexstr_to_bytes(hexstr), std::nullopt);
    hexstr[32] = 'Z' + 1;
    EXPECT_FALSE(hexstr_to_bytes(hexstr, bytes));
    EXPECT_EQ(hexstr_to_bytes(hexstr), std::nullopt);
}

TEST(serialize, bytes_to_hexstr_lower) {
    ByteVec1D bytes = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff};
    std::string expected = "000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff";
    auto hexstr = bytes_to_hexstr(bytes, false);
    EXPECT_EQ(expected, hexstr);
}

TEST(serialize, bytes_to_hexstr_upper) {
    ByteVec1D bytes = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff};
    std::string expected = "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF";
    auto hexstr = bytes_to_hexstr(bytes, true);
    EXPECT_EQ(expected, hexstr);
}

TEST(serialize, bytes_to_bigint) {
    BigInt expected("ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef", 16);
    ByteVec1D bytes_be = {0xdd, 0xf2, 0x52, 0xad, 0x1b, 0xe2, 0xc8, 0x9b, 0x69, 0xc2, 0xb0, 0x68, 0xfc, 0x37, 0x8d, 0xaa, 0x95, 0x2b, 0xa7, 0xf1, 0x63, 0xc4, 0xa1, 0x16, 0x28, 0xf5, 0x5a, 0x4d, 0xf5, 0x23, 0xb3, 0xef};
    ByteVec1D bytes_le = swap_endian(bytes_be);
    EXPECT_EQ(expected, BigInt(bytes_be, BE));
    EXPECT_EQ(expected, BigInt(bytes_le, LE));
}

TEST(serialize, bytes_zero_val_to_bigint) {
    BigInt expected("0", 16);
    ByteVec1D bytes = {0x00};
    EXPECT_EQ(expected, BigInt(bytes, BE));
    EXPECT_EQ(expected, BigInt(bytes, LE));
}

TEST(serialize, bytes_empty_vec_to_bigint) {
    BigInt expected("0", 16);
    ByteVec1D bytes;
    EXPECT_EQ(expected, BigInt(bytes, BE));
    EXPECT_EQ(expected, BigInt(bytes, LE));
}

TEST(serialize, bigint_to_bytes) {
    ByteVec1D expected_be = {0xdd, 0xf2, 0x52, 0xad, 0x1b, 0xe2, 0xc8, 0x9b, 0x69, 0xc2, 0xb0, 0x68, 0xfc, 0x37, 0x8d, 0xaa, 0x95, 0x2b, 0xa7, 0xf1, 0x63, 0xc4, 0xa1, 0x16, 0x28, 0xf5, 0x5a, 0x4d, 0xf5, 0x23, 0xb3, 0xef};
    ByteVec1D expected_le = swap_endian(expected_be);
    BigInt integer("ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef", 16);
    EXPECT_EQ(expected_be, integer.bytes(BE));
    EXPECT_EQ(expected_le, integer.bytes(LE));
}

TEST(serialize, pad_low_0_bytes) {
    ByteVec1D expected = {0xff, 0xff, 0xff};
    ByteVec1D array = {0xff, 0xff, 0xff};
    pad(array, 0x00, 0, true);
    EXPECT_EQ(expected, array);
}

TEST(serialize, pad_high_0_bytes) {
    ByteVec1D expected = {0xff, 0xff, 0xff};
    ByteVec1D array = {0xff, 0xff, 0xff};
    pad(array, 0x00, 0, false);
    EXPECT_EQ(expected, array);
}

TEST(serialize, pad_low_1_bytes) {
    ByteVec1D expected = {0x00, 0xff, 0xff, 0xff};
    ByteVec1D array = {0xff, 0xff, 0xff};
    pad(array, 0x00, 1, true);
    EXPECT_EQ(expected, array);
}

TEST(serialize, pad_high_1_bytes) {
    ByteVec1D expected = {0xff, 0xff, 0xff, 0x00};
    ByteVec1D array = {0xff, 0xff, 0xff};
    pad(array, 0x00, 1, false);
    EXPECT_EQ(expected, array);
}

TEST(serialize, pad_low_3_bytes) {
    ByteVec1D expected = {0x00, 0x00, 0x00, 0xff, 0xff, 0xff};
    ByteVec1D array = {0xff, 0xff, 0xff};
    pad(array, 0x00, 3, true);
    EXPECT_EQ(expected, array);
}

TEST(serialize, pad_high_3_bytes) {
    ByteVec1D expected = {0xff, 0xff, 0xff, 0x00, 0x00, 0x00};
    ByteVec1D array = {0xff, 0xff, 0xff};
    pad(array, 0x00, 3, false);
    EXPECT_EQ(expected, array);
}

TEST(serialize, pad_to_empty_vec) {
    ByteVec1D expected = {0xff, 0xff, 0xff};
    ByteVec1D array = {};
    pad(array, 0xff, 3, false);
    EXPECT_EQ(expected, array);
    array.clear();
    pad(array, 0xff, 3, true);
    EXPECT_EQ(expected, array);
}

TEST(serialize, bytes_to_bits_empty_input) {
    BitVec1D bits = bytes_to_bits({});
    EXPECT_EQ(bits.size(), 0);
}

TEST(serialize, bytes_to_bits_input_1_byte) {
    ByteVec1D bytes = {0xaa}; // 1010 1010
    BitVec1D bits = bytes_to_bits(bytes);
    EXPECT_EQ(bits[0], false);
    EXPECT_EQ(bits[1], true);
    EXPECT_EQ(bits[2], false);
    EXPECT_EQ(bits[3], true);
    EXPECT_EQ(bits[4], false);
    EXPECT_EQ(bits[5], true);
    EXPECT_EQ(bits[6], false);
    EXPECT_EQ(bits[7], true);

    bytes = {0xff, 0xaa}; // 0xAAFF (1010 1010 1111 1111) in Little-Endian
    bits = bytes_to_bits(bytes);
    EXPECT_EQ(bits[0], true);
    EXPECT_EQ(bits[1], true);
    EXPECT_EQ(bits[2], true);
    EXPECT_EQ(bits[3], true);
    EXPECT_EQ(bits[4], true);
    EXPECT_EQ(bits[5], true);
    EXPECT_EQ(bits[6], true);
    EXPECT_EQ(bits[7], true);
    EXPECT_EQ(bits[8], false);
    EXPECT_EQ(bits[9], true);
    EXPECT_EQ(bits[10], false);
    EXPECT_EQ(bits[11], true);
    EXPECT_EQ(bits[12], false);
    EXPECT_EQ(bits[13], true);
    EXPECT_EQ(bits[14], false);
    EXPECT_EQ(bits[15], true);

    bytes = {0xff, 0x00}; // 0x00FF (0000 0000 1111 1111) in Little-Endian
    bits = bytes_to_bits(bytes);
    EXPECT_EQ(bits[0], true);
    EXPECT_EQ(bits[1], true);
    EXPECT_EQ(bits[2], true);
    EXPECT_EQ(bits[3], true);
    EXPECT_EQ(bits[4], true);
    EXPECT_EQ(bits[5], true);
    EXPECT_EQ(bits[6], true);
    EXPECT_EQ(bits[7], true);
    EXPECT_EQ(bits[8], false);
    EXPECT_EQ(bits[9], false);
    EXPECT_EQ(bits[10], false);
    EXPECT_EQ(bits[11], false);
    EXPECT_EQ(bits[12], false);
    EXPECT_EQ(bits[13], false);
    EXPECT_EQ(bits[14], false);
    EXPECT_EQ(bits[15], false);
}

TEST(serialize, concat_bytevec2d_to_bytevec1d) {
    ByteVec2D input = {{0x11, 0x11}, {0x22, 0x22}, {0x33, 0x33}};
    ByteVec1D expected = {0x11, 0x11, 0x22, 0x22, 0x33, 0x33};
    auto output = concat(input);
    EXPECT_EQ(bytes_to_hexstr(expected), bytes_to_hexstr(output));

    input = {{0x11, 0x11}, {0x00}, {0x33, 0x33}};
    expected = {0x11, 0x11, 0x00, 0x33, 0x33};
    output = concat(input);
    EXPECT_EQ(bytes_to_hexstr(expected), bytes_to_hexstr(output));

    input = {{0x11, 0x11}, {}, {0x33, 0x33}};
    expected = {0x11, 0x11, 0x33, 0x33};
    output = concat(input);
    EXPECT_EQ(bytes_to_hexstr(expected), bytes_to_hexstr(output));
}

} // namespace iden3math::serialize
