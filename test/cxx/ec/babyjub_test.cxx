#include <iden3math/ec/babyjub.h>
#include <thread>
#include <gtest/gtest.h>
#include "../helper.h"

namespace iden3math::ec::babyjub {

static const BigInt SCALAR("7120861356467848435263064379192047478074060781135320967663101236819528304084", 10); // Keccak256("mimcsponge")

TEST(babyjub, mul_scalar_0) {
    std::vector expected = {
        Point(BigInt("18058203230422821100148902886692797825595047188176647392575344616831548269714", 10), BigInt("9711944701593973077501119179165085016629774523576998623469657748778309798227", 10)),
        Point(BigInt("3598477115375956014038673435118146273990307570718665994596246292010479888129", 10), BigInt("10638520112689679830908703045972665394487620627132873410365672297806577997548", 10)),
        Point(BigInt("20068488524343428343945823897150776910502466037019831511105395347911200592077", 10), BigInt("8654005564599280198548960974184530398968954683306629931317509486422683019120", 10)),
        Point(BigInt("1849709214364475357585969693704432383181472208225229281285117719337272073204", 10), BigInt("18451711273925426077957820904184781650189576332992118472883273153550457582391", 10)),
        Point(BigInt("8164955083074281765066340516779381128062754693509520847640138270905945070611", 10), BigInt("11504883933255131275390020434605054379816495444161386997958011493723936481739", 10)),
        Point(BigInt("20161966016588131487526605238729539830095519736725627307328874531509709229985", 10), BigInt("21838622077568889252070914197936926387675043695603634836760324992068819439282", 10)),
        Point(BigInt("9016060823506514903024278079964201892552848499600653326725844121413455402436", 10), BigInt("1433315585026185822545953698065468791642925403771786040013854078655602250511", 10)),
        Point(BigInt("4149125861156641808167198192861494274112836587379564600003695001405742602074", 10), BigInt("15012123577419008102376780457181104116248129136746901263724158616390163835057", 10)),
        Point(BigInt("16769121324609857009771940507777948381726766401524325989160599324763019145672", 10), BigInt("21221703240687076020073266409164939956400167724396416668600350202076425367362", 10)),
        Point(BigInt("13662381692432124817590068929771235626090649601372076081156839876245057072716", 10), BigInt("11875434533726579364028615423140091026872068546561779882749203939522525966280", 10)),
        Point(BigInt("7786211610771086640732968948948934459815312439607351001219137455487993958808", 10), BigInt("20892312086850436436580187229755060871984641571755189935103566171373589523285", 10)),
        Point(BigInt("16979253599798790801542430695746462081221941030986859253900382968172801092698", 10), BigInt("2963391394860310941128427653887818176039030893121857560000203132342903347308", 10)),
        Point(BigInt("20434052856117330969151217816586151876580710853657828707577649572124918655471", 10), BigInt("13369781475545563326543882229534022159075888430544955744879918985707979777669", 10)),
        Point(BigInt("15597293562088176756514672565521756585295204049642034240167508979634630522234", 10), BigInt("13169970525493886657306418436485262877591427802545225057235731882330474938082", 10)),
        Point(BigInt("10874247762419956457655755255969839451978642617148809368773993900760613706405", 10), BigInt("3011438736238125491627852110534739748666281309540334406987246435267076880116", 10)),
        Point(BigInt("18976834212510808728552787429041588119342450769835358636290040951840549149039", 10), BigInt("20164192616221012248771691790759529983519961951473447977377243124289836641894", 10)),
        Point(BigInt("16698748240295415679105302275846697290488965169083248140542635689061563366152", 10), BigInt("15517211406232475597090168267255817066070536157864143879736337982081989033507", 10)),
        Point(BigInt("4849694445368387461109688007612614327807703362077550197795872172260613954784", 10), BigInt("6677499408694801311984173495382696498467223483695747355863708846322399688187", 10)),
        Point(BigInt("10925856036187846001278530595694831520173798017442466762980866013234456999446", 10), BigInt("9435975509805912587456688842355144264042467404896381277672809787117061984198", 10)),
        Point(BigInt("2568851204372039438775829405261575522157162816187660340380329590506813217320", 10), BigInt("18528541724518410279522176748980735035850098391905116641331916288161112817412", 10)),
        Point(BigInt("6354608399835178158766819065999168607273824363751924476347297443250263354215", 10), BigInt("1035702096766039058996599541662193962103531110043552636086539763868995129431", 10)),
        Point(BigInt("17898523932621850837203424744310168605738217974835479336856108560381786690431", 10), BigInt("15652103817233268867986352171957910220591881606430758841422290723567496723148", 10)),
        Point(BigInt("2432316636749406387324212358713134969896886445197201870849456261821041273893", 10), BigInt("12462051661153821265818056024014214313399179046207993201666072273889879967199", 10)),
        Point(BigInt("19586165157739467532053926421298285518496382829762849765281421050530855796172", 10), BigInt("13085311804199665699231739487144054217797576952258092352063024309617251756454", 10)),
        Point(BigInt("2275886167240815328054711229018755024185679744824050990093911182785518479397", 10), BigInt("15475628157102067040224062525854661643537030594200044757982240965871939847046", 10)),
        Point(BigInt("18847059151863868901204517880266927758027765651518106255211875568045175949337", 10), BigInt("18468459443562563974390106412142211304911442401861789147515888790652239142767", 10)),
        Point(BigInt("14705075448252843938669074531691699456431419203505425497649213468165753948050", 10), BigInt("2425159744017397092759923138675812287170554590921106328441541564582321328283", 10)),
        Point(BigInt("7756944335028556019496218298793834946434079973935524939778783062456727424735", 10), BigInt("8826264549047037337171906040484324887901027251316601194803831002363620671253", 10)),
        Point(BigInt("15030667277635711980478479044563754175456001438774107177448985319512796414189", 10), BigInt("10208562219302973502881039951564622455954262777236162560765876778190947080560", 10)),
        Point(BigInt("5584205652628571667953199044225695569246997313039438768383809132962460375034", 10), BigInt("19829668892419341984730675828649348792040362842142950054708969595921733100563", 10)),
        Point(BigInt("8165289217149846557615746267491975852508958488205799507618424338035697137593", 10), BigInt("3402842383277977801051559183221742678668875719899083325084720132253122500710", 10)),
        Point(BigInt("5926673335387841104931035434942319482996460272196146467513260121914101618637", 10), BigInt("4093562653750860721357118126779405980330017714687229953462770763325898638451", 10)),
        Point(BigInt("2074892274955502889176701509001849949397218838435643597556890825048874185832", 10), BigInt("4620707348330232312885519355198540393680461832423788694580271697331008577363", 10)),
        Point(BigInt("18855975661170405260590932714389499491969168878552546084604154559514247636115", 10), BigInt("9965436063286761879795452605289409356799345692940543597394375140008465851835", 10)),
        Point(BigInt("98498659505784686386580537140030563074608541690022153969972219032973667411", 10), BigInt("6828590367825035565863228683242614620759229361108887213315664423971649865807", 10)),
        Point(BigInt("16054344300666421223410551230141027625304911358972496989929366613930141471267", 10), BigInt("12043073064606635048032141904239971314574150371125860565586463996760742916003", 10)),
        Point(BigInt("7170603943009600743825288247493836486294488498652085523044316091498687351756", 10), BigInt("6745468978377301983958326579665254778459580458465388226916020747979943533093", 10)),
        Point(BigInt("5218173568034700872042403541317546066678776017017741116287203654053975498425", 10), BigInt("2349543640895422363210509086950926985037703131878490959510912790807826480846", 10)),
        Point(BigInt("2903720575893556231675937878247751287042123152933330148924365112335950127275", 10), BigInt("19635281006443943594278428359604405234778512075858455102071704991637504118294", 10)),
        Point(BigInt("12668594808012854287597219270070963332458244958595501256414001277854724683548", 10), BigInt("234290191485029846914154746117181435725500162734531879373996807932230493438", 10)),
        Point(BigInt("8201359575600457958781799491145849871918631685067546018995100959879341559590", 10), BigInt("13882413021785447809596857968551236193396976245451695922350934428287553052558", 10)),
        Point(BigInt("6210171835537160886239540118394348020775508899382106011519369778595157389710", 10), BigInt("3319641681983174154868458143518267503276927144318415377126331821269955765310", 10)),
        Point(BigInt("1762137836580252087631831583967140244652044046244959801348055349349802493769", 10), BigInt("2044214520309359158161222770647169919859988904517093737020539388467144724316", 10)),
        Point(BigInt("16542105408704492188176451546619244388878659499076471243696840023411512497454", 10), BigInt("2954663956425974425793953871129722186740971930208816620294886238140192646051", 10)),
        Point(BigInt("14716175693824002807989048584282942883756895478162213957350006491778550949088", 10), BigInt("14190101026186002825239039165171838059347869137983615578750040928588533788021", 10)),
        Point(BigInt("20696490090865382553183572280005497407337132974007192479917703917804009525992", 10), BigInt("6851481016570836249206962679966328871104473695233095043531081796482784141543", 10)),
        Point(BigInt("15062699238370491779251314587268192434396699521935660112218520754414343442670", 10), BigInt("18942582360312710946214041566874799624197904058613573585315111177651725571300", 10)),
        Point(BigInt("10965874165373310450786582107814792564261708936739730601020968058471613957898", 10), BigInt("9599978817879922177265800872366998929019588519457226825798133064318148163912", 10)),
        Point(BigInt("1672251539304280306686633867159506966277171833774245335552784945232514912428", 10), BigInt("15407602168499672383503019859152741715441457813245042164278360051983903424257", 10)),
        Point(BigInt("9196238709116519161356571823905224112144742789040859719315333623524064833389", 10), BigInt("11002519826173277390660557553240214384754879542721579080975256463549763880899", 10)),
        Point(BigInt("18990791502275314725528088201859380861526247609875260557663648919905214784420", 10), BigInt("11134397077258815619136457331851035262879925328905487711281547005745185481904", 10)),
        Point(BigInt("10842789975186753731687895061131034164990972614269816761746557158821066536405", 10), BigInt("2120273379275744114395527559792274956163279177323035901629909463104648011305", 10)),
        Point(BigInt("8365981062061450766780265012976026815035639283395339741094856787904562501711", 10), BigInt("14028278598051734329251111246813432950260809835914302712382998218295765457557", 10)),
        Point(BigInt("13963159860798266710417178861643103416199111001907373515972924269978103173338", 10), BigInt("5964560309273470103145650288608584594516016523360548388533313400799202969552", 10)),
        Point(BigInt("11953570450288301046644645908117075841783151029140343830101923724018564303650", 10), BigInt("21545659357329056578369655844358027597846165998445901856582094024163279075122", 10)),
        Point(BigInt("5163048905312021340067677339469846891678786234993935003945870421769792365115", 10), BigInt("9252807490905909160646536086155483490304790085128940771253221186007381871674", 10)),
        Point(BigInt("12618168670989365581086812194782302689463816561277641607291420142940031248144", 10), BigInt("21144623237287252788424647332234673334309015534029961217138516484050605334119", 10)),
        Point(BigInt("15773907268995282944549935679996316695091390936930864545209759961930439201851", 10), BigInt("3169705115050241426717631914423418766611690719580362410675096668548941545073", 10)),
        Point(BigInt("7587080063084594810564685934737008601023505517223455058037562734614306919570", 10), BigInt("5632398771518412420352117731051851556490011151028249634447739282153834120367", 10)),
        Point(BigInt("8579878826504762486995776397477250731008327043784755139526791304669826503528", 10), BigInt("462361846058765439200408202917670176848014098560344805635866918068710986735", 10)),
        Point(BigInt("9436617305583360090821768079851119020550862128674700561498766890621629314783", 10), BigInt("15329558202360458439191310752286365899080010571681699509349771255805318934540", 10)),
        Point(BigInt("15214506014455262644675464438801062693727088645207155833393830878494084530850", 10), BigInt("988855316211285249252958842853327996614495556721859890245701946558271201420", 10)),
        Point(BigInt("5088440890948845858738476507402914833232750112351839182623285406573663739695", 10), BigInt("8892806290210326462652155505599827675262737985211050624468525018509991759004", 10)),
        Point(BigInt("16679215461282697028320038493571805597676924332884667893288911622075445259096", 10), BigInt("21411107934282483166231936326486938951086865827373293743055735224388691139667", 10)),
        Point(BigInt("16070124406379856133456240271437711520819239416040791211959130682312737635616", 10), BigInt("16615108243893202902919361296917695163832985891893451129809149444913111638904", 10)),
        Point(BigInt("9884299566142515685267424380675961422927265093766758699249519567382177166168", 10), BigInt("15099662150430960370624815041641889740657905597377679156362829467488588553505", 10)),
        Point(BigInt("3454336594306721638845211805350827742899057896690996020181221805206229636481", 10), BigInt("19454335249392124816840754744813310532729232266988997205934599594406129947021", 10)),
        Point(BigInt("14001776003810538538985981396229183346479187267181811120738970608849946831121", 10), BigInt("3515634629196137822420111056020690671748915557608697264880863874774290772545", 10)),
        Point(BigInt("21810279432225851027066613097291091984011245357737306960544758879890886669796", 10), BigInt("20945340369320143224996903512949032778230509111473373163143919417390298001398", 10)),
        Point(BigInt("16320569124909326402357360715160233105286208231491259565936490773798046330643", 10), BigInt("6212515652585029840644722091142197131759016856689949197718964586482611041792", 10)),
        Point(BigInt("12181764302180236061325746370630679663378101717549985205432708259980829593709", 10), BigInt("13498569967692030352113955391179732187467215027235081357609590161842339791463", 10)),
        Point(BigInt("15083642217129451707615663277993778325331433353498840554438970073215840145729", 10), BigInt("18770633712367273311060899478880462553646015582948353912444672729057554163265", 10)),
        Point(BigInt("16982326914631302116615796010770858341075740452803409536504041610938571236799", 10), BigInt("10450510001979565486120527090810552148961205977840788120781886224226119256035", 10)),
        Point(BigInt("15064774616463437249211264677259572773551793826408784431218309381147981997731", 10), BigInt("1858126068689011735231153984958032461601059318152155133867816952371260386848", 10)),
        Point(BigInt("7634205383866601578608459806578473411823319367514962154769564305584841189964", 10), BigInt("7217983309038720723427240377553479836184416889109389735327626181938880127548", 10)),
        Point(BigInt("5020450901069380557297627534705604878669823597438523859449753290505540941545", 10), BigInt("7697438744888097874637604122627885624661129462216038152049928708782134594142", 10)),
        Point(BigInt("11069373553098604318989666736640848153278752583943829571436308410853391304847", 10), BigInt("9050442549674705771160685730736233384142406934718050739323357708441406346444", 10)),
        Point(BigInt("2332394682779937851745884336781995384977156018155205132203937410101337963821", 10), BigInt("17607267086491019278127392526774026144772009476741987461731734328723318930499", 10)),
        Point(BigInt("12180286854572782231965278893745938326848225681456087035572363662690120355103", 10), BigInt("4315032300000693398100939519620319266335669888145762001084332213088797935561", 10)),
        Point(BigInt("122404272528162580329504977083907737303532821899558793944133761593159997243", 10), BigInt("10213099822609894636484857677393283057193646836367473524670502199258245525134", 10)),
        Point(BigInt("12379990732828303563252714841343634290740860184679352281642718963517312108763", 10), BigInt("12238127228416488112662384313964150777726053349988932735482520701449067955857", 10)),
        Point(BigInt("20488121325054490125676359853331733145343983654199882141684929254197942504533", 10), BigInt("4043749319673311863948542645624129386454364606869341917915445626277251675092", 10)),
        Point(BigInt("18071285354640136714987415465858110546325538377172694705481162082457769928106", 10), BigInt("11832711690383709081821322760148321067146892249337047285831088018667356572046", 10)),
        Point(BigInt("16134846083598837366071786961101587963518255606050333134594206077208955337263", 10), BigInt("13732289446892425999853217712474671574185239614640675247289765308295856783699", 10)),
        Point(BigInt("21641215417780148321306772403418884948490913278055509607187153255575967190221", 10), BigInt("14883269739625518181933140251752583363006652057005097892491286359294827900649", 10)),
        Point(BigInt("5253805981188223546287887477980250136170270179305870574340375628253010981917", 10), BigInt("8656802042766417109370139065864413487558361356551195465742196550845301740166", 10)),
        Point(BigInt("19012329739922539711967320167467645397775707276202653242159412847514661153658", 10), BigInt("21724520385411755285165767205995355182572686799036314004613076384048966547513", 10)),
        Point(BigInt("17155943940765691846748934433931746489369185097628072849188519606518361387975", 10), BigInt("9121870051891434172902143601195296647468553979050636748588559185017033106620", 10)),
        Point(BigInt("19968621452436944039683511196163993621804514390456508135745711490874552609107", 10), BigInt("10847254115739139842540571308225781764051538338462938510688894752086056321322", 10)),
        Point(BigInt("20451188471672357186611230801869808312901642204132224014944561434046647164730", 10), BigInt("14064581027067350906583475079231486812113836847681880337826383201090979402158", 10)),
        Point(BigInt("277721127280987217841775631510751801149909470288409432348983901970169012662", 10), BigInt("9701517317492275249795828306100146555831742661031556769883548732342894334160", 10)),
        Point(BigInt("17210187228447761148636592425375232604900372809565910661732471578539359535456", 10), BigInt("13568083906838687038539203890318404997222127381456241724152393877442813697886", 10)),
        Point(BigInt("14772225670328046140664551885162656725406604991851903031692951144994387437571", 10), BigInt("1430908455405270284639639435461952520711005465211888287905557006570350406493", 10)),
        Point(BigInt("14311498995227538284016504732268509338622486802351824947085614819587980325173", 10), BigInt("13897796139998000023165711039698159338521883598008348109536261262418821580977", 10)),
        Point(BigInt("15694142239096697610304226806508101307331874402857611593737584875230752788825", 10), BigInt("143132724247337056027349383315875433900164747564407492726569740803458304713", 10)),
        Point(BigInt("19417680937129119211426953987366040733330325062955800350228588857305310646494", 10), BigInt("12654175484338713564222770347061338339413151304310434420930083905347015230938", 10)),
        Point(BigInt("8829232052716269513302906013369358058459267714579627469156106193323026015845", 10), BigInt("13751468062724847059153679758141822103420788074972054375883613119669570386613", 10)),
        Point(BigInt("16717999705843784915127445375435506560374931248051733911671330837697957693213", 10), BigInt("5309508339651040339359050711896752522029478198266591934803298212727192882787", 10)),
        Point(BigInt("14185221954640767997826470734567728818785211705973890841171581475248548403522", 10), BigInt("19228075420034106646991532955649367188493225227413643999173684267225868287782", 10)),
        Point(BigInt("12806641199340208102819228742571468157442539383376734204894948454118163225257", 10), BigInt("10470606914227567118976814106552159553634837549015765244339721753684500126144", 10)),
    };
    for (uint32_t i = 0; i < expected.size(); ++i) {
        SCOPED_TRACE(i);
        auto p = mul_scalar(generator(), SCALAR + i);
        EXPECT_EQ(p.x, expected[i].x);
        EXPECT_EQ(p.y, expected[i].y);
    }
}

TEST(babyjub, mul_scalar_1) {
    // Repeated add() should equal to mul_scalar()
    auto repeat_times = 100000;
    Point sum(0, 1);
    for (uint32_t i = 0; i < repeat_times; ++i) {
        sum = add(sum, generator());
    }
    auto mul = mul_scalar(generator(), repeat_times);
    EXPECT_EQ(sum, mul);
}

TEST(babyjub, in_curve) {
    // Invalid
    std::vector invalid_points = {
        Point(0, 0),
        Point(1, 1),
        Point(2, 2),
        Point(16, 16),
        Point(-1, -1),
        Point(-2, -2),
        Point(-1, 16),
        Point(prime(), prime()),
        Point(1, prime()),
        Point(prime() + 1, prime()),
        Point(prime() - 1, prime())
    };
    for (const auto& p : invalid_points) {
        SCOPED_TRACE_POINT(p, 10)
        EXPECT_FALSE(in_curve(p));
    }
    // Valid - Standard points
    EXPECT_TRUE(in_curve(zero()));
    EXPECT_TRUE(in_curve(generator()));
    // Valid - Other points
    auto job = [&](uint32_t start) {
        for (uint32_t i = start; i < start + 1000; ++i) {
            SCOPED_TRACE(i);
            SCOPED_TRACE_BIGINT(SCALAR + i, 10)
            auto p = mul_scalar(generator(), SCALAR + i);
            EXPECT_TRUE(in_curve(p));
        }
    };
    std::vector<std::shared_ptr<std::thread>> threads;
    for (uint32_t i = 0; i < 10; ++i) {
        threads.push_back(std::make_shared<std::thread>(job, i * 10000));
    }
    for (auto& t : threads) {
        t->join();
    }
}

TEST(babyjub, in_subgroup) {
    // Base point is in subgroup
    Point a(0, 1);
    EXPECT_TRUE(in_sub_group(a));

    // Point on curve but not in subgroup
    Point p{
        BigInt("18058203230422821100148902886692797825595047188176647392575344616831548269714", 10),
        BigInt("9711944701593973077501119179165085016629774523576998623469657748778309798227", 10)
    };
    EXPECT_TRUE(in_curve(p));
    EXPECT_FALSE(in_sub_group(p));

    // Points in subgroup
    Point g_subgroup = mul_scalar(generator(), 8);
    EXPECT_TRUE(in_sub_group(g_subgroup));
    auto job = [&](int32_t start) {
        for (int32_t i = start; i < start + 1000; ++i) {
            SCOPED_TRACE(i);
            SCOPED_TRACE_BIGINT(i, 10)
            auto _p = mul_scalar(g_subgroup, i);
            EXPECT_TRUE(in_sub_group(_p));
        }
    };
    std::vector<std::shared_ptr<std::thread>> threads;
    for (uint32_t i = 0; i < 8; ++i) {
        threads.push_back(std::make_shared<std::thread>(job, i * 1000));
    }
    for (auto& t : threads) {
        t->join();
    }
}

TEST(babyjub, add) {
    auto p2 = Point(prime()-1, prime()-1);
    auto p1 = add(Point(0, 1), p2);
    EXPECT_TRUE(p1 == p2);
    // Commutative Law
    auto job = [&](const std::tuple<Point, Point, Point>& p) {
        const auto& a = std::get<0>(p);
        const auto& b = std::get<1>(p);
        const auto& c = std::get<2>(p);
        SCOPED_TRACE_POINT(c, 10)
        SCOPED_TRACE_POINT(b, 10)
        SCOPED_TRACE_POINT(a, 10)
        auto r1 = add(a, b);
        auto r2 = add(b, a);
        EXPECT_EQ(r1, r2);
        auto abc1 = add(add(a, b), c);
        auto abc2 = add(a, add(b, c));
        EXPECT_EQ(abc1.x, abc2.x);
        EXPECT_EQ(abc1.y, abc2.y);
    };
    std::vector<std::tuple<Point, Point, Point>> points_0 = {
        // {a, b, c}
        {Point(0, 0), Point(0, 0), Point(prime(), prime())},
        {Point(0, 1), Point(0, 1), Point(prime(), prime())},
        {Point(1, 0), Point(1, 0), Point(prime(), prime())},
        {Point(prime(), 1), Point(prime(), 1), Point(16, 16)},
        {Point(1, prime()), Point(1, prime()), Point(16, 16)},
        {Point(prime(), prime()), Point(prime(), prime()), Point(16, 16)},
        {Point(prime() + 1, prime()), Point(0, 0), Point(16, 16)},
        {Point(prime() - 1, prime()), Point(0, 0), Point(16, 16)},
    };
    for (const auto& p : points_0) {
        job(p);
    }
    std::vector<std::tuple<Point, Point, Point>> points_1;
    auto k = SCALAR;
    for (uint32_t i = 0; i < 500; ++i) {
        points_1.emplace_back(mul_scalar(generator(), ++k), mul_scalar(generator(), ++k), mul_scalar(generator(), ++k));
    }
    for (const auto& p : points_1) {
        job(p);
    }
}

TEST(babyjub, compress_decompress_le) {
    for (uint32_t i = 0; i < 1000; ++i) {
        SCOPED_TRACE(i);
        auto k = SCALAR + i;
        auto p = mul_scalar(generator(), k);
        auto packed = compress(p, LE);
        auto unpacked = decompress(packed, LE);
        EXPECT_TRUE(in_curve(p));
        EXPECT_NE(unpacked, std::nullopt);
        EXPECT_TRUE(p == *unpacked);
    }
}

TEST(babyjub, compress_decompress_be) {
    for (uint32_t i = 0; i < 1000; ++i) {
        SCOPED_TRACE(i);
        auto k = SCALAR + i;
        auto p = mul_scalar(generator(), k);
        auto packed = compress(p, BE);
        auto unpacked = decompress(packed, BE);
        EXPECT_TRUE(in_curve(p));
        EXPECT_NE(unpacked, std::nullopt);
        EXPECT_TRUE(p == *unpacked);
    }
}

} // namespace iden3math::ec::babyjub
