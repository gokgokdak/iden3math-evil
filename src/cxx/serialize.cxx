#include <iden3math/serialize.h>
#include <algorithm>
#include <unordered_map>
#include <utility>

namespace iden3math::serialize {

static const std::unordered_map<std::string, Byte> BYTE_MAP = {
    {"00", 0x00}, {"01", 0x01}, {"02", 0x02}, {"03", 0x03}, {"04", 0x04}, {"05", 0x05}, {"06", 0x06}, {"07", 0x07}, {"08", 0x08}, {"09", 0x09}, {"0a", 0x0a}, {"0b", 0x0b}, {"0c", 0x0c}, {"0d", 0x0d}, {"0e", 0x0e}, {"0f", 0x0f},
    {"10", 0x10}, {"11", 0x11}, {"12", 0x12}, {"13", 0x13}, {"14", 0x14}, {"15", 0x15}, {"16", 0x16}, {"17", 0x17}, {"18", 0x18}, {"19", 0x19}, {"1a", 0x1a}, {"1b", 0x1b}, {"1c", 0x1c}, {"1d", 0x1d}, {"1e", 0x1e}, {"1f", 0x1f},
    {"20", 0x20}, {"21", 0x21}, {"22", 0x22}, {"23", 0x23}, {"24", 0x24}, {"25", 0x25}, {"26", 0x26}, {"27", 0x27}, {"28", 0x28}, {"29", 0x29}, {"2a", 0x2a}, {"2b", 0x2b}, {"2c", 0x2c}, {"2d", 0x2d}, {"2e", 0x2e}, {"2f", 0x2f},
    {"30", 0x30}, {"31", 0x31}, {"32", 0x32}, {"33", 0x33}, {"34", 0x34}, {"35", 0x35}, {"36", 0x36}, {"37", 0x37}, {"38", 0x38}, {"39", 0x39}, {"3a", 0x3a}, {"3b", 0x3b}, {"3c", 0x3c}, {"3d", 0x3d}, {"3e", 0x3e}, {"3f", 0x3f},
    {"40", 0x40}, {"41", 0x41}, {"42", 0x42}, {"43", 0x43}, {"44", 0x44}, {"45", 0x45}, {"46", 0x46}, {"47", 0x47}, {"48", 0x48}, {"49", 0x49}, {"4a", 0x4a}, {"4b", 0x4b}, {"4c", 0x4c}, {"4d", 0x4d}, {"4e", 0x4e}, {"4f", 0x4f},
    {"50", 0x50}, {"51", 0x51}, {"52", 0x52}, {"53", 0x53}, {"54", 0x54}, {"55", 0x55}, {"56", 0x56}, {"57", 0x57}, {"58", 0x58}, {"59", 0x59}, {"5a", 0x5a}, {"5b", 0x5b}, {"5c", 0x5c}, {"5d", 0x5d}, {"5e", 0x5e}, {"5f", 0x5f},
    {"60", 0x60}, {"61", 0x61}, {"62", 0x62}, {"63", 0x63}, {"64", 0x64}, {"65", 0x65}, {"66", 0x66}, {"67", 0x67}, {"68", 0x68}, {"69", 0x69}, {"6a", 0x6a}, {"6b", 0x6b}, {"6c", 0x6c}, {"6d", 0x6d}, {"6e", 0x6e}, {"6f", 0x6f},
    {"70", 0x70}, {"71", 0x71}, {"72", 0x72}, {"73", 0x73}, {"74", 0x74}, {"75", 0x75}, {"76", 0x76}, {"77", 0x77}, {"78", 0x78}, {"79", 0x79}, {"7a", 0x7a}, {"7b", 0x7b}, {"7c", 0x7c}, {"7d", 0x7d}, {"7e", 0x7e}, {"7f", 0x7f},
    {"80", 0x80}, {"81", 0x81}, {"82", 0x82}, {"83", 0x83}, {"84", 0x84}, {"85", 0x85}, {"86", 0x86}, {"87", 0x87}, {"88", 0x88}, {"89", 0x89}, {"8a", 0x8a}, {"8b", 0x8b}, {"8c", 0x8c}, {"8d", 0x8d}, {"8e", 0x8e}, {"8f", 0x8f},
    {"90", 0x90}, {"91", 0x91}, {"92", 0x92}, {"93", 0x93}, {"94", 0x94}, {"95", 0x95}, {"96", 0x96}, {"97", 0x97}, {"98", 0x98}, {"99", 0x99}, {"9a", 0x9a}, {"9b", 0x9b}, {"9c", 0x9c}, {"9d", 0x9d}, {"9e", 0x9e}, {"9f", 0x9f},
    {"a0", 0xa0}, {"a1", 0xa1}, {"a2", 0xa2}, {"a3", 0xa3}, {"a4", 0xa4}, {"a5", 0xa5}, {"a6", 0xa6}, {"a7", 0xa7}, {"a8", 0xa8}, {"a9", 0xa9}, {"aa", 0xaa}, {"ab", 0xab}, {"ac", 0xac}, {"ad", 0xad}, {"ae", 0xae}, {"af", 0xaf},
    {"b0", 0xb0}, {"b1", 0xb1}, {"b2", 0xb2}, {"b3", 0xb3}, {"b4", 0xb4}, {"b5", 0xb5}, {"b6", 0xb6}, {"b7", 0xb7}, {"b8", 0xb8}, {"b9", 0xb9}, {"ba", 0xba}, {"bb", 0xbb}, {"bc", 0xbc}, {"bd", 0xbd}, {"be", 0xbe}, {"bf", 0xbf},
    {"c0", 0xc0}, {"c1", 0xc1}, {"c2", 0xc2}, {"c3", 0xc3}, {"c4", 0xc4}, {"c5", 0xc5}, {"c6", 0xc6}, {"c7", 0xc7}, {"c8", 0xc8}, {"c9", 0xc9}, {"ca", 0xca}, {"cb", 0xcb}, {"cc", 0xcc}, {"cd", 0xcd}, {"ce", 0xce}, {"cf", 0xcf},
    {"d0", 0xd0}, {"d1", 0xd1}, {"d2", 0xd2}, {"d3", 0xd3}, {"d4", 0xd4}, {"d5", 0xd5}, {"d6", 0xd6}, {"d7", 0xd7}, {"d8", 0xd8}, {"d9", 0xd9}, {"da", 0xda}, {"db", 0xdb}, {"dc", 0xdc}, {"dd", 0xdd}, {"de", 0xde}, {"df", 0xdf},
    {"e0", 0xe0}, {"e1", 0xe1}, {"e2", 0xe2}, {"e3", 0xe3}, {"e4", 0xe4}, {"e5", 0xe5}, {"e6", 0xe6}, {"e7", 0xe7}, {"e8", 0xe8}, {"e9", 0xe9}, {"ea", 0xea}, {"eb", 0xeb}, {"ec", 0xec}, {"ed", 0xed}, {"ee", 0xee}, {"ef", 0xef},
    {"f0", 0xf0}, {"f1", 0xf1}, {"f2", 0xf2}, {"f3", 0xf3}, {"f4", 0xf4}, {"f5", 0xf5}, {"f6", 0xf6}, {"f7", 0xf7}, {"f8", 0xf8}, {"f9", 0xf9}, {"fa", 0xfa}, {"fb", 0xfb}, {"fc", 0xfc}, {"fd", 0xfd}, {"fe", 0xfe}, {"ff", 0xff},
};

static const std::unordered_map<Byte, std::string> HEXSTR_MAP_LOWER = {
    {0x00, "00"}, {0x01, "01"}, {0x02, "02"}, {0x03, "03"}, {0x04, "04"}, {0x05, "05"}, {0x06, "06"}, {0x07, "07"}, {0x08, "08"}, {0x09, "09"}, {0x0a, "0a"}, {0x0b, "0b"}, {0x0c, "0c"}, {0x0d, "0d"}, {0x0e, "0e"}, {0x0f, "0f"},
    {0x10, "10"}, {0x11, "11"}, {0x12, "12"}, {0x13, "13"}, {0x14, "14"}, {0x15, "15"}, {0x16, "16"}, {0x17, "17"}, {0x18, "18"}, {0x19, "19"}, {0x1a, "1a"}, {0x1b, "1b"}, {0x1c, "1c"}, {0x1d, "1d"}, {0x1e, "1e"}, {0x1f, "1f"},
    {0x20, "20"}, {0x21, "21"}, {0x22, "22"}, {0x23, "23"}, {0x24, "24"}, {0x25, "25"}, {0x26, "26"}, {0x27, "27"}, {0x28, "28"}, {0x29, "29"}, {0x2a, "2a"}, {0x2b, "2b"}, {0x2c, "2c"}, {0x2d, "2d"}, {0x2e, "2e"}, {0x2f, "2f"},
    {0x30, "30"}, {0x31, "31"}, {0x32, "32"}, {0x33, "33"}, {0x34, "34"}, {0x35, "35"}, {0x36, "36"}, {0x37, "37"}, {0x38, "38"}, {0x39, "39"}, {0x3a, "3a"}, {0x3b, "3b"}, {0x3c, "3c"}, {0x3d, "3d"}, {0x3e, "3e"}, {0x3f, "3f"},
    {0x40, "40"}, {0x41, "41"}, {0x42, "42"}, {0x43, "43"}, {0x44, "44"}, {0x45, "45"}, {0x46, "46"}, {0x47, "47"}, {0x48, "48"}, {0x49, "49"}, {0x4a, "4a"}, {0x4b, "4b"}, {0x4c, "4c"}, {0x4d, "4d"}, {0x4e, "4e"}, {0x4f, "4f"},
    {0x50, "50"}, {0x51, "51"}, {0x52, "52"}, {0x53, "53"}, {0x54, "54"}, {0x55, "55"}, {0x56, "56"}, {0x57, "57"}, {0x58, "58"}, {0x59, "59"}, {0x5a, "5a"}, {0x5b, "5b"}, {0x5c, "5c"}, {0x5d, "5d"}, {0x5e, "5e"}, {0x5f, "5f"},
    {0x60, "60"}, {0x61, "61"}, {0x62, "62"}, {0x63, "63"}, {0x64, "64"}, {0x65, "65"}, {0x66, "66"}, {0x67, "67"}, {0x68, "68"}, {0x69, "69"}, {0x6a, "6a"}, {0x6b, "6b"}, {0x6c, "6c"}, {0x6d, "6d"}, {0x6e, "6e"}, {0x6f, "6f"},
    {0x70, "70"}, {0x71, "71"}, {0x72, "72"}, {0x73, "73"}, {0x74, "74"}, {0x75, "75"}, {0x76, "76"}, {0x77, "77"}, {0x78, "78"}, {0x79, "79"}, {0x7a, "7a"}, {0x7b, "7b"}, {0x7c, "7c"}, {0x7d, "7d"}, {0x7e, "7e"}, {0x7f, "7f"},
    {0x80, "80"}, {0x81, "81"}, {0x82, "82"}, {0x83, "83"}, {0x84, "84"}, {0x85, "85"}, {0x86, "86"}, {0x87, "87"}, {0x88, "88"}, {0x89, "89"}, {0x8a, "8a"}, {0x8b, "8b"}, {0x8c, "8c"}, {0x8d, "8d"}, {0x8e, "8e"}, {0x8f, "8f"},
    {0x90, "90"}, {0x91, "91"}, {0x92, "92"}, {0x93, "93"}, {0x94, "94"}, {0x95, "95"}, {0x96, "96"}, {0x97, "97"}, {0x98, "98"}, {0x99, "99"}, {0x9a, "9a"}, {0x9b, "9b"}, {0x9c, "9c"}, {0x9d, "9d"}, {0x9e, "9e"}, {0x9f, "9f"},
    {0xa0, "a0"}, {0xa1, "a1"}, {0xa2, "a2"}, {0xa3, "a3"}, {0xa4, "a4"}, {0xa5, "a5"}, {0xa6, "a6"}, {0xa7, "a7"}, {0xa8, "a8"}, {0xa9, "a9"}, {0xaa, "aa"}, {0xab, "ab"}, {0xac, "ac"}, {0xad, "ad"}, {0xae, "ae"}, {0xaf, "af"},
    {0xb0, "b0"}, {0xb1, "b1"}, {0xb2, "b2"}, {0xb3, "b3"}, {0xb4, "b4"}, {0xb5, "b5"}, {0xb6, "b6"}, {0xb7, "b7"}, {0xb8, "b8"}, {0xb9, "b9"}, {0xba, "ba"}, {0xbb, "bb"}, {0xbc, "bc"}, {0xbd, "bd"}, {0xbe, "be"}, {0xbf, "bf"},
    {0xc0, "c0"}, {0xc1, "c1"}, {0xc2, "c2"}, {0xc3, "c3"}, {0xc4, "c4"}, {0xc5, "c5"}, {0xc6, "c6"}, {0xc7, "c7"}, {0xc8, "c8"}, {0xc9, "c9"}, {0xca, "ca"}, {0xcb, "cb"}, {0xcc, "cc"}, {0xcd, "cd"}, {0xce, "ce"}, {0xcf, "cf"},
    {0xd0, "d0"}, {0xd1, "d1"}, {0xd2, "d2"}, {0xd3, "d3"}, {0xd4, "d4"}, {0xd5, "d5"}, {0xd6, "d6"}, {0xd7, "d7"}, {0xd8, "d8"}, {0xd9, "d9"}, {0xda, "da"}, {0xdb, "db"}, {0xdc, "dc"}, {0xdd, "dd"}, {0xde, "de"}, {0xdf, "df"},
    {0xe0, "e0"}, {0xe1, "e1"}, {0xe2, "e2"}, {0xe3, "e3"}, {0xe4, "e4"}, {0xe5, "e5"}, {0xe6, "e6"}, {0xe7, "e7"}, {0xe8, "e8"}, {0xe9, "e9"}, {0xea, "ea"}, {0xeb, "eb"}, {0xec, "ec"}, {0xed, "ed"}, {0xee, "ee"}, {0xef, "ef"},
    {0xf0, "f0"}, {0xf1, "f1"}, {0xf2, "f2"}, {0xf3, "f3"}, {0xf4, "f4"}, {0xf5, "f5"}, {0xf6, "f6"}, {0xf7, "f7"}, {0xf8, "f8"}, {0xf9, "f9"}, {0xfa, "fa"}, {0xfb, "fb"}, {0xfc, "fc"}, {0xfd, "fd"}, {0xfe, "fe"}, {0xff, "ff"},
};

static const std::unordered_map<Byte, std::string> HEXSTR_MAP_UPPER = {
    {0x00, "00"}, {0x01, "01"}, {0x02, "02"}, {0x03, "03"}, {0x04, "04"}, {0x05, "05"}, {0x06, "06"}, {0x07, "07"}, {0x08, "08"}, {0x09, "09"}, {0x0a, "0A"}, {0x0b, "0B"}, {0x0c, "0C"}, {0x0d, "0D"}, {0x0e, "0E"}, {0x0f, "0F"},
    {0x10, "10"}, {0x11, "11"}, {0x12, "12"}, {0x13, "13"}, {0x14, "14"}, {0x15, "15"}, {0x16, "16"}, {0x17, "17"}, {0x18, "18"}, {0x19, "19"}, {0x1a, "1A"}, {0x1b, "1B"}, {0x1c, "1C"}, {0x1d, "1D"}, {0x1e, "1E"}, {0x1f, "1F"},
    {0x20, "20"}, {0x21, "21"}, {0x22, "22"}, {0x23, "23"}, {0x24, "24"}, {0x25, "25"}, {0x26, "26"}, {0x27, "27"}, {0x28, "28"}, {0x29, "29"}, {0x2a, "2A"}, {0x2b, "2B"}, {0x2c, "2C"}, {0x2d, "2D"}, {0x2e, "2E"}, {0x2f, "2F"},
    {0x30, "30"}, {0x31, "31"}, {0x32, "32"}, {0x33, "33"}, {0x34, "34"}, {0x35, "35"}, {0x36, "36"}, {0x37, "37"}, {0x38, "38"}, {0x39, "39"}, {0x3a, "3A"}, {0x3b, "3B"}, {0x3c, "3C"}, {0x3d, "3D"}, {0x3e, "3E"}, {0x3f, "3F"},
    {0x40, "40"}, {0x41, "41"}, {0x42, "42"}, {0x43, "43"}, {0x44, "44"}, {0x45, "45"}, {0x46, "46"}, {0x47, "47"}, {0x48, "48"}, {0x49, "49"}, {0x4a, "4A"}, {0x4b, "4B"}, {0x4c, "4C"}, {0x4d, "4D"}, {0x4e, "4E"}, {0x4f, "4F"},
    {0x50, "50"}, {0x51, "51"}, {0x52, "52"}, {0x53, "53"}, {0x54, "54"}, {0x55, "55"}, {0x56, "56"}, {0x57, "57"}, {0x58, "58"}, {0x59, "59"}, {0x5a, "5A"}, {0x5b, "5B"}, {0x5c, "5C"}, {0x5d, "5D"}, {0x5e, "5E"}, {0x5f, "5F"},
    {0x60, "60"}, {0x61, "61"}, {0x62, "62"}, {0x63, "63"}, {0x64, "64"}, {0x65, "65"}, {0x66, "66"}, {0x67, "67"}, {0x68, "68"}, {0x69, "69"}, {0x6a, "6A"}, {0x6b, "6B"}, {0x6c, "6C"}, {0x6d, "6D"}, {0x6e, "6E"}, {0x6f, "6F"},
    {0x70, "70"}, {0x71, "71"}, {0x72, "72"}, {0x73, "73"}, {0x74, "74"}, {0x75, "75"}, {0x76, "76"}, {0x77, "77"}, {0x78, "78"}, {0x79, "79"}, {0x7a, "7A"}, {0x7b, "7B"}, {0x7c, "7C"}, {0x7d, "7D"}, {0x7e, "7E"}, {0x7f, "7F"},
    {0x80, "80"}, {0x81, "81"}, {0x82, "82"}, {0x83, "83"}, {0x84, "84"}, {0x85, "85"}, {0x86, "86"}, {0x87, "87"}, {0x88, "88"}, {0x89, "89"}, {0x8a, "8A"}, {0x8b, "8B"}, {0x8c, "8C"}, {0x8d, "8D"}, {0x8e, "8E"}, {0x8f, "8F"},
    {0x90, "90"}, {0x91, "91"}, {0x92, "92"}, {0x93, "93"}, {0x94, "94"}, {0x95, "95"}, {0x96, "96"}, {0x97, "97"}, {0x98, "98"}, {0x99, "99"}, {0x9a, "9A"}, {0x9b, "9B"}, {0x9c, "9C"}, {0x9d, "9D"}, {0x9e, "9E"}, {0x9f, "9F"},
    {0xa0, "A0"}, {0xa1, "A1"}, {0xa2, "A2"}, {0xa3, "A3"}, {0xa4, "A4"}, {0xa5, "A5"}, {0xa6, "A6"}, {0xa7, "A7"}, {0xa8, "A8"}, {0xa9, "A9"}, {0xaa, "AA"}, {0xab, "AB"}, {0xac, "AC"}, {0xad, "AD"}, {0xae, "AE"}, {0xaf, "AF"},
    {0xb0, "B0"}, {0xb1, "B1"}, {0xb2, "B2"}, {0xb3, "B3"}, {0xb4, "B4"}, {0xb5, "B5"}, {0xb6, "B6"}, {0xb7, "B7"}, {0xb8, "B8"}, {0xb9, "B9"}, {0xba, "BA"}, {0xbb, "BB"}, {0xbc, "BC"}, {0xbd, "BD"}, {0xbe, "BE"}, {0xbf, "BF"},
    {0xc0, "C0"}, {0xc1, "C1"}, {0xc2, "C2"}, {0xc3, "C3"}, {0xc4, "C4"}, {0xc5, "C5"}, {0xc6, "C6"}, {0xc7, "C7"}, {0xc8, "C8"}, {0xc9, "C9"}, {0xca, "CA"}, {0xcb, "CB"}, {0xcc, "CC"}, {0xcd, "CD"}, {0xce, "CE"}, {0xcf, "CF"},
    {0xd0, "D0"}, {0xd1, "D1"}, {0xd2, "D2"}, {0xd3, "D3"}, {0xd4, "D4"}, {0xd5, "D5"}, {0xd6, "D6"}, {0xd7, "D7"}, {0xd8, "D8"}, {0xd9, "D9"}, {0xda, "DA"}, {0xdb, "DB"}, {0xdc, "DC"}, {0xdd, "DD"}, {0xde, "DE"}, {0xdf, "DF"},
    {0xe0, "E0"}, {0xe1, "E1"}, {0xe2, "E2"}, {0xe3, "E3"}, {0xe4, "E4"}, {0xe5, "E5"}, {0xe6, "E6"}, {0xe7, "E7"}, {0xe8, "E8"}, {0xe9, "E9"}, {0xea, "EA"}, {0xeb, "EB"}, {0xec, "EC"}, {0xed, "ED"}, {0xee, "EE"}, {0xef, "EF"},
    {0xf0, "F0"}, {0xf1, "F1"}, {0xf2, "F2"}, {0xf3, "F3"}, {0xf4, "F4"}, {0xf5, "F5"}, {0xf6, "F6"}, {0xf7, "F7"}, {0xf8, "F8"}, {0xf9, "F9"}, {0xfa, "FA"}, {0xfb, "FB"}, {0xfc, "FC"}, {0xfd, "FD"}, {0xfe, "FE"}, {0xff, "FF"},
};

void lower(std::string& str) {
    std::ranges::for_each(str, [](char& c) {
        if (c >= 'A' && c <= 'Z') {
            c += ('a' - 'A'); // Convert to lowercase
        }
    });
}

ByteVec1D swap_endian(const ByteVec1D& bytes) {
    if (bytes.empty()) {
        return {};
    }
    ByteVec1D r(bytes);
    std::ranges::reverse(r);
    return r;
}

bool hexstr_to_bytes(const std::string& hex, ByteVec1D& bytes, std::optional<std::reference_wrapper<std::string>> error) {
    auto _hex = hex;
    if (_hex.size() % 2 != 0) {
        _hex.insert(0, 1, '0');
    }
    for (size_t i = 0; i < _hex.size(); i += 2) {
        std::string byte_str = _hex.substr(i, 2);
        lower(byte_str);
        const auto it = BYTE_MAP.find(byte_str);
        if (it == BYTE_MAP.end()) {
            if (error) {
                error->get() = "Invalid hex character: " + byte_str;
            }
            bytes.clear();
            return false;
        }
        bytes.push_back(it->second);
    }
    return true;
}

std::optional<ByteVec1D> hexstr_to_bytes(const std::string& hex, std::optional<std::reference_wrapper<std::string>> error) {
    ByteVec1D bytes;
    if (hexstr_to_bytes(hex, bytes, error)) {
        return bytes;
    }
    return std::nullopt;
}

std::string bytes_to_hexstr(const ByteVec1D& bytes, bool upper) {
    std::string hex;
    if (bytes.empty()) {
        return hex;
    }
    const auto& map = upper ? HEXSTR_MAP_UPPER : HEXSTR_MAP_LOWER;
    for (const auto& byte : bytes) {
        hex += map.at(byte);
    }
    return hex;
}

void pad(ByteVec1D& bytes, Byte value, uint32_t count, bool low) {
    if (count == 0) {
        return;
    }
    if (low) {
        bytes.insert(bytes.begin(), count, value);
    } else {
        bytes.insert(bytes.end(), count, value);
    }
}

BitVec1D bytes_to_bits(const ByteVec1D& bytes) {
    BitVec1D bits;
    for (const auto& byte : bytes) {
        bits.push(byte & 0x01);
        bits.push(byte & 0x02);
        bits.push(byte & 0x04);
        bits.push(byte & 0x08);
        bits.push(byte & 0x10);
        bits.push(byte & 0x20);
        bits.push(byte & 0x40);
        bits.push(byte & 0x80);
    }
    return bits;
}

ByteVec1D concat(const ByteVec2D& bytes) {
    ByteVec1D r;
    for (const auto& vec : bytes) {
        r.insert(r.end(), vec.begin(), vec.end());
    }
    return r;
}

} // namespace iden3math::serialize
